syntax = "proto3";

package selector;
option go_package = "github.com/williamhogman/k8s-sched-demo/gen/go/will/global-scheduler/v1;selectorv1";

// ClusterSelector service handles selecting the appropriate cluster for a sandbox
service ClusterSelector {
  // GetSandbox is a simplified endpoint that selects a cluster and schedules a sandbox in one call
  rpc GetSandbox (GetSandboxRequest) returns (GetSandboxResponse) {}
  rpc ReleaseSandbox (ReleaseSandboxRequest) returns (ReleaseSandboxResponse) {}
  rpc RetainSandbox (RetainSandboxRequest) returns (RetainSandboxResponse) {}
}

// GetSandboxRequest contains information needed to get a sandbox
message GetSandboxRequest {
  // Idempotence key to ensure safe operation repeatability
  string idempotence_key = 1;
  
  // Metadata for the sandbox
  map<string, string> metadata = 2;
}

// GetSandboxResponse contains information about the created sandbox
message GetSandboxResponse {
  // Whether the operation was successful
  bool success = 1;
  
  // Error message if unsuccessful
  string error = 2;
  
  // ID of the scheduled sandbox (only set if success is true)
  string sandbox_id = 3;

  // ID of the cluster where the sandbox was scheduled
  string cluster_id = 4;
}

message ReleaseSandboxRequest {
  // ID of the cluster where the sandbox was scheduled
  string cluster_id = 1;
  // ID of the sandbox to release
  string sandbox_id = 2;  
}


message ReleaseSandboxResponse {
  // Whether the operation was successful
  bool success = 1;
  
  // Error message if unsuccessful
  string error = 2;
}

// RetainSandboxRequest contains information needed to extend a sandbox's expiration
message RetainSandboxRequest {
  // ID of the cluster where the sandbox was scheduled
  string cluster_id = 1;
  // ID of the sandbox to retain
  string sandbox_id = 2;
}

// RetainSandboxResponse contains information about the retained sandbox
message RetainSandboxResponse {
  // Whether the operation was successful
  bool success = 1;
  
  // Error message if unsuccessful
  string error = 2;
  
  // New expiration time of the sandbox (Unix timestamp)
  int64 expiration_time = 3;
}